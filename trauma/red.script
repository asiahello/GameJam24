go.property("dir", vmath.vector3())
go.property("speed", 50)

local UP = vmath.vector3(0, 1, 0)
local RAD_180 = math.pi

local function follow_player(self)
	self.follow = true
end

local function angle_to_player()
	local self_pos = go.get_position()
	local target_pos = go.get_position("/player#sprite")
	return -math.atan2(target_pos.x - self_pos.x, target_pos.y - self_pos.y)
end

local function distance_to_player()
	local self_pos = go.get_position()
	local target_pos = go.get_position("/player#sprite")
	return vmath.length(self_pos, target_pos)
end

function init(self)
	-- self.speed = 50
	self.life = 10
	self.rotation = 0
	self.range = 200
	self.follow = true
	self.obstacle_collision = false
end

local function explode(self)
	self.life = 1000
	-- go.set(".", "euler.z", -self.rotation)
	-- go.set_rotation(vmath.quat())
	self.speed = 0
	sprite.play_flipbook("#sprite", "explosion")
end


function update(self, dt)

	if self.follow then
		local current_angle = math.rad(go.get(".", "euler.z"))
		local target_angle = angle_to_player()
		-- rotate towards the target angle
		-- spherical interpolation towards the target rotation
		-- tweak rotation speed to turn faster
		local current_rotation = go.get_rotation()
		local target_rotation = vmath.quat_rotation_z(target_angle)
		local rotation_speed = 4 -- tweak this!
		local rotation = vmath.slerp(rotation_speed * dt, current_rotation, target_rotation)
		go.set_rotation(rotation)

		-- move in current direction
		local direction = vmath.rotate(rotation, UP)
		local distance = self.speed * dt
		msg.post(".", "apply_force", {force = direction * distance * 100, position = go.get_world_position()})
	end





	self.life = self.life - dt
	if self.life < 0 then
		explode(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("animation_done") then
		go.delete()
		print("shit")
	elseif message_id == hash("collision_response") then
		-- explode(self)
		-- go.delete(message.other_id)
		msg.post("/gui#ui", "get_older", { age = 1 })
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

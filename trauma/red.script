go.property("dir", vmath.vector3())
go.property("speed", 50)

local UP = vmath.vector3(0, 1, 0)
local RAD_180 = math.pi

local function follow_player(self)
	self.follow = true
end

local function angle_to_player()
	local self_pos = go.get_position()
	local target_pos = go.get_position("/player#sprite")
	return -math.atan2(target_pos.x - self_pos.x, target_pos.y - self_pos.y)
end

local function distance_to_player()
	local self_pos = go.get_position()
	local target_pos = go.get_position("/player#sprite")
	return vmath.length(self_pos, target_pos)
end

local function follow_player_movement(self, dt)
	local current_angle = math.rad(go.get(".", "euler.z"))
	local target_angle = angle_to_player()
	-- rotate towards the target angle
	-- spherical interpolation towards the target rotation
	-- tweak rotation speed to turn faster
	local current_rotation = go.get_rotation()
	local target_rotation = vmath.quat_rotation_z(target_angle)
	local rotation_speed = 4 -- tweak this!
	local rotation = vmath.slerp(rotation_speed * dt, current_rotation, target_rotation)
	go.set_rotation(rotation)

	-- move in current direction
	local direction = vmath.rotate(rotation, UP)
	local distance = self.speed * dt
	msg.post(".", "apply_force", {force = direction * distance * 100, position = go.get_world_position()})
end


function init(self)
	-- self.speed = 50
	self.life = 10
	self.rotation = 0
	self.range = 200
	
	self.follow = true
	self.catched = false

	self.catched_by = nil
	self.offset_catched = vmath.vector3(50,0,0)

	self.angular_speed = 360/2

	self.obstacle_collision = false

	self.correction = vmath.vector3()

end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function explode(self)
	self.life = 1000
	-- go.set(".", "euler.z", -self.rotation)
	-- go.set_rotation(vmath.quat())
	self.speed = 0
	sprite.play_flipbook("#sprite", "explosion")
end

function update(self, dt)
	self.correction = vmath.vector3()

	if self.follow then
		follow_player_movement(self, dt)

	elseif self.catched then
		-- rotate over trauma container
		local center = go.get_position(self.catched_by)
		local r = vmath.quat_rotation_z(math.rad(self.angular_speed) * dt)
		self.offset_catched = vmath.rotate(r, self.offset_catched)
		go.set_position(center + self.offset_catched)
	end

	self.life = self.life - dt
	if self.life < 0 then
		explode(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("animation_done") then
		go.delete() -- usuwa okruchy
		print("animation done")
	end

	if message_id == hash("contact_point_response")  and message.other_group == hash("player") then
		if message.distance > 0 then
			-- project the accumulated correction onto the penetration vector
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				-- Only care for projections that does not overshoot.
				local comp = (message.distance - message.distance * proj) * message.normal
				-- Apply compensation
				go.set_position(go.get_position() + comp)
				-- Accumulate correction done
				self.correction = self.correction + comp
			end

			msg.post("/gui#ui", "get_older", { age = 1 })
			msg.post("/player", "get_older", { age = 1 })
		end

	elseif message_id == hash("catched_you") and not self.catched then
		self.follow = false
		self.catched = true
		self.catched_by = sender
		go.animate(".", "euler.z", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_LINEAR, 2)		
		self.offset_catched = go.get_position() - go.get_position(self.catched_by)

	elseif message_id == hash("you_are_free") then
		go.cancel_animations(".")
		self.follow = true
		self.catched = false
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

local UP = hash("key_up")
local DOWN = hash("key_down")
local LEFT = hash("key_left")
local RIGHT = hash("key_right")

require("main.utils")

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("camera", "follow")

	self.age = 0
	
	self.moving = false
	self.firing = false
	self.obstacle_collision = false
	self.collision_bounce = false

	self.input = vmath.vector3()
	self.dir = vmath.vector3(0, 1, 0)
	self.speed = 400

	self.current_animation = nil
end

function final(self)
	msg.post(".", "release_input_focus")
end

local function update_animation(self)
	local animation_id = math.floor(self.age / 10)
	local new_animation_name = "dumpling_" .. math.max(1, math.min(9, animation_id))
	local new_animation = hash(new_animation_name)
	if new_animation ~= self.current_animation then
		msg.post("#sprite", "play_animation", {id = new_animation})
		self.current_animation = new_animation
	end
end

local function bounced(self)
	self.collision_bounce = false
end

local function handle_collision(self, dt)
	print("Collision with obstacle detected")

	-- Determine the direction of the collision
	local pos = go.get_position()

	-- Calculate the bounce direction based on the collision
	local bounce_distance = 15
	local bounce_dir = vmath.vector3(0, 0, 0)

	if math.abs(self.dir.x) > math.abs(self.dir.y) then
		-- Horizontal collision: Bounce in the opposite X direction
		bounce_dir.x = -self.dir.x * bounce_distance
	else
		-- Vertical collision: Bounce in the opposite Y direction
		bounce_dir.y = -self.dir.y * bounce_distance
	end

	-- Calculate the final position after the bounce
	local final_pos = pos + bounce_dir

	-- Animate the player to the final position with a bounce effect
	go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, final_pos, go.EASING_OUTBOUNCE, 0.2, 0, bounced)

	-- Prevent further movement
	self.moving = false
	self.obstacle_collision = false
	
end

local function hard_bounce(self, dt, dir)

	-- Determine the direction of the collision
	local pos = go.get_position()

	-- Calculate the bounce direction based on the collision
	local bounce_distance = 100
	local bounce_dir = vmath.vector3(0, 0, 0)

	if dir == hash("x") then
		-- Horizontal collision: Bounce in the opposite X direction
		bounce_dir.x = -self.dir.x * bounce_distance
	else
		-- Vertical collision: Bounce in the opposite Y direction
		bounce_dir.y = -self.dir.y * bounce_distance
	end

	-- Calculate the final position after the bounce
	local final_pos = pos + bounce_dir

	-- Animate the player to the final position with a bounce effect
	go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, final_pos, go.EASING_LINEAR, 0.1, 0, bounced)

	-- Prevent further movement
	self.moving = false
	self.obstacle_collision = false

end


function update(self, dt)
	if self.obstacle_collision then
		handle_collision(self, dt)
	end

	local pos = go.get_position()
	if self.moving then
		pos = pos + self.dir * self.speed * dt
		go.set_position(pos)
	end
	if pos.x <= 20 or pos.x >= 15 * 128 then 
		hard_bounce(self, dt, hash("x"))
	end
	if pos.y <= 0 or pos.y >= 17 * 128 then
		hard_bounce(self, dt, hash("y"))
	end
	self.input.x = 0
	self.input.y = 0
	self.moving = false
	self.firing = false
	self.obstacle_collision = false
end

function on_message(self, message_id, message, sender)
	if message_id == hash("get_older") then
		self.age = self.age + message.age
		update_animation(self)

		-- można zrobić disable wysyłania get_older albo coś
		-- bo spawnuje go.delete(): instance could not be resolved
		-- TODO do przesledzenia
		if self.age > 100 then
			msg.post("/trauma_boss", "release_the_kraken")
			msg.post("/trauma_factory#factory", "release_the_kraken")			
			msg.post("/trauma_container#factory", "release_the_kraken")			
			
		end
		
	elseif message_id == hash("contact_point_response") then
		if message.group == hash("obstacles") then
			self.obstacle_collision = true
		end
	end

end

function on_input(self, action_id, action)
	if action_id == UP then
		self.input.y = 1
	elseif action_id == DOWN then
		self.input.y = -1
	elseif action_id == LEFT then
		self.input.x = -1
	elseif action_id == RIGHT then
		self.input.x = 1
	elseif action_id == hash("key_space") and action.released then
		self.firing = true
	end

	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input)
	end
end

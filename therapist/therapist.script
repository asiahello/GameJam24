require("main.utils")


-- trauma container can have different capacity for trauma
-- trauma_container_factory handle this, this is default
go.property("capacity", 10)

local ANIMATION_RECEIVING = hash("therapist_receiving")
local ANIMATION_IDLE = hash("therapist_idle")
local ANIMATION_OVERLOAD = hash("therapist_overload")


local LABEL_CAPACITY = "Cierpliwosc terapeutki: "

local function play_flipbook_idle()
	sprite.play_flipbook("#sprite", ANIMATION_IDLE)
end

local function play_flipbook_recieving()
	-- -- Set the position property y component to 200
	-- go.set(".", "position.y", 200)
	-- -- Then animate it
	-- go.animate(".", "position.y", go.PLAYBACK_LOOP_PINGPONG, 100, go.EASING_OUTBOUNCE, 2)
	sprite.play_flipbook("#sprite", ANIMATION_RECEIVING, play_flipbook_idle)
end

local function overloaded()
	print('overloaded')
	go.delete(".")
end

local function play_flipbook_overload()
	sprite.play_flipbook("#sprite", ANIMATION_OVERLOAD, overloaded)
end
	

function init(self)	
	self.traumas = {}
	self.is_visible = false
	self.overloading = false
	
	label.set_text("#label", "")
	go.set("#sprite", "tint", vmath.vector4(1,1,1,0))
end

function update(self, dt)
	if self.capacity <= 0 and not self.overloading then
		print('overloading...')
		self.overloading = true
		play_flipbook_overload()
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") then
		
		if message.group == hash("player") then
			self.is_visible = true
			go.set("#sprite", "tint", vmath.vector4(1,1,1,1))
			label.set_text("#label", LABEL_CAPACITY .. self.capacity)
		end

		if message.group == hash("traumas") and self.is_visible then
			if message.enter and not is_in(message.other_id, self.traumas) then
				self.capacity = self.capacity - 1
				table.insert(self.traumas, message.other_id)
				msg.post(message.other_id, "caught_you") -- , {params?})
				label.set_text("#label", LABEL_CAPACITY .. self.capacity)
				play_flipbook_recieving()
			end
		end

		if self.is_visible then
			label.set_text("#label", LABEL_CAPACITY .. self.capacity)
		end
	end
end

function final(self)
	for _, trauma in ipairs(self.traumas) do
		msg.post(trauma, "you_are_free")
	end
end
